import { mat4, vec4, vec3 } from 'gl-matrix';

export default class Frustum {
    constructor(p0, p1, p2, p3, p4, p5, p6, p7) {
        //  6------------7
        //  | \   f2   / |
        //  |  2------3  |
        //  |f3|  f0  |f1|
        //  |  0------1  |
        //  | /   f4   \ |
        //  4------------5
        this.normals = [6];
        this.points = [6];
        this.points[0] = p0;
        this.points[1] = p1;
        this.points[2] = p2;
        this.points[3] = p0;
        this.points[4] = p0;
        this.points[5] = p4;
        this.normals[0] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p1, p0)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p2, p0))));
        this.normals[1] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p5, p1)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p3, p1))));
        this.normals[2] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p3, p2)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p6, p2))));
        this.normals[3] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p2, p0)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p4, p0))));
        this.normals[4] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p4, p0)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p1, p0))));
        this.normals[5] = vec3.normalize(vec3.create(),
            vec3.cross(vec3.create(),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p6, p4)),
                vec3.normalize(vec3.create(),
                    vec3.subtract(vec3.create(), p5, p4))));

        // console.log("p0(" + p0.x + "," + p0.y + "," + p0.z + "):" +
        //             "p7(" + p7.x + "," + p7.y + "," + p7.z + ")");

        // console.log("p0(" + this.points[0][0] + "," + this.points[0][1] + "," + this.points[0][2] + "):" +
        //             "n0(" + this.normals[0][0] + "," + this.normals[0][1] + "," + this.normals[0][2] + ")");
    }

    overlapSphere(sphereCenter, sphereRadius)
    {
        let distance = 0;

        //console.log("sc(" + sphereCenter[0] + "," + sphereCenter[1] + "," + sphereCenter[2]);

        for(let i = 0;i<6;++i)
        {
            let frustumPlaneToSphereDir = vec3.create();
            vec3.subtract(frustumPlaneToSphereDir, sphereCenter, this.points[i]);
            distance = vec3.dot(this.normals[i], frustumPlaneToSphereDir);

            // console.log(":p" + i + "(" +
            //             this.points[0][0] + "," + this.points[0][1] + "," + this.points[0][2] + ")");
            // console.log(":n" + i + "(" +
            //             this.normals[0][0] + "," + this.normals[0][1] + "," + this.normals[0][2] + ")");
            // console.log(":d(" + distance + ")?sr(" + sphereRadius + ")");

            if(Math.abs(distance) < sphereRadius)
            {
                // intersect, return true
                return true;
            }
            else if(distance > sphereRadius)
            {
                // outside, return false
                return false;
            }
            else
            {
                // potentially inside, do nothing
            }
        }
        // all inside, return true
        return true;
    }

    overlapSphereZ(sphereCenter, sphereRadius) {
        let frustumPlaneToSphereDir0 = vec3.subtract(vec3.create(), sphereCenter, this.points[0]);
        let distance0 = vec3.dot(this.normals[0], frustumPlaneToSphereDir0);

        let frustumPlaneToSphereDir5 = vec3.subtract(vec3.create(), sphereCenter, this.points[5]);
        let distance5 = vec3.dot(this.normals[5], frustumPlaneToSphereDir5);

        if (Math.abs(distance0) < sphereRadius || Math.abs(distance5) < sphereRadius) {
            // intersect, return true
            return true;
        }
        else if (distance0 > sphereRadius || distance5 > sphereRadius) {
            // outside, return false
            return false;
        }
        else {
            return true;
        }
    }

    overlapSphereY(sphereCenter, sphereRadius) {
        let frustumPlaneToSphereDir2 = vec3.subtract(vec3.create(), sphereCenter, this.points[2]);
        let distance2 = vec3.dot(this.normals[2], frustumPlaneToSphereDir2);

        let frustumPlaneToSphereDir4 = vec3.subtract(vec3.create(), sphereCenter, this.points[4]);
        let distance4 = vec3.dot(this.normals[4], frustumPlaneToSphereDir4);

        if (Math.abs(distance2) < sphereRadius || Math.abs(distance4) < sphereRadius) {
            // intersect, return true
            return true;
        }
        else if (distance2 > sphereRadius || distance4 > sphereRadius) {
            // outside, return false
            return false;
        }
        else {
            return true;
        }
    }

    overlapSphereX(sphereCenter, sphereRadius) {
        let frustumPlaneToSphereDir1 = vec3.subtract(vec3.create(), sphereCenter, this.points[1]);
        let distance1 = vec3.dot(this.normals[1], frustumPlaneToSphereDir1);

        let frustumPlaneToSphereDir3 = vec3.subtract(vec3.create(), sphereCenter, this.points[3]);
        let distance3 = vec3.dot(this.normals[3], frustumPlaneToSphereDir3);

        if (Math.abs(distance1) < sphereRadius || Math.abs(distance3) < sphereRadius) {
            // intersect, return true
            return true;
        }
        else if (distance1 > sphereRadius || distance3 > sphereRadius) {
            // outside, return false
            return false;
        }
        else {
            return true;
        }
    }

}